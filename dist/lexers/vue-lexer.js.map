{"version":3,"file":"vue-lexer.js","names":["parse","compileTemplate","compileScript","BaseLexer","JavascriptLexer","VueLexer","options","functions","content","filename","keys","sfc","sourceMap","descriptor","script","scriptContent","Lexer1","on","warning","emit","concat","extract","scriptSetup","scriptSetupContent","id","Lexer2","template","templateContent","compiledTemplate","source","code","Lexer3"],"sources":["../../src/lexers/vue-lexer.js"],"sourcesContent":["import { parse, compileTemplate, compileScript } from '@vue/compiler-sfc'\n\nimport BaseLexer from './base-lexer.js'\nimport JavascriptLexer from './javascript-lexer.js'\n\nexport default class VueLexer extends BaseLexer {\n  constructor(options = {}) {\n    super(options)\n    this.functions = options.functions || ['$t']\n  }\n\n  extract(content, filename) {\n    let keys = []\n    const sfc = parse(content, { sourceMap: true, filename })\n\n    // Handle <script> block\n    if (sfc.descriptor.script) {\n      const scriptContent = sfc.descriptor.script.content\n      const Lexer1 = new JavascriptLexer({ functions: this.functions })\n      Lexer1.on('warning', (warning) => this.emit('warning', warning))\n      keys = keys.concat(Lexer1.extract(scriptContent))\n    }\n\n    // Handle <script setup> block\n    if (sfc.descriptor.scriptSetup) {\n      const scriptSetupContent = compileScript(sfc.descriptor, { id: filename }).content\n      const Lexer2 = new JavascriptLexer({ functions: this.functions })\n      Lexer2.on('warning', (warning) => this.emit('warning', warning))\n      keys = keys.concat(Lexer2.extract(scriptSetupContent))\n    }\n\n    // Handle <template> block\n    if (sfc.descriptor.template) {\n      const templateContent = sfc.descriptor.template.content\n      const compiledTemplate = compileTemplate({\n        source: templateContent,\n        filename,\n        id: filename,\n      }).code\n      const Lexer3 = new JavascriptLexer({ functions: this.functions })\n      Lexer3.on('warning', (warning) => this.emit('warning', warning))\n      keys = keys.concat(Lexer3.extract(compiledTemplate))\n    }\n\n    return keys\n  }\n}\n"],"mappings":"mjCAAA,SAASA,KAAK,EAAEC,eAAe,EAAEC,aAAa,QAAQ,mBAAmB;;AAEzE,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,eAAe,MAAM,uBAAuB;;AAE9BC,QAAQ;EAC3B,oBAA0B,eAAdC,OAAO,uEAAG,CAAC,CAAC;IACtB,0BAAMA,OAAO;IACb,MAAKC,SAAS,GAAGD,OAAO,CAACC,SAAS,IAAI,CAAC,IAAI,CAAC;EAC9C,CAAC;;IAED,iBAAQC,OAAO,EAAEC,QAAQ,EAAE;MACzB,IAAIC,IAAI,GAAG,EAAE;MACb,IAAMC,GAAG,GAAGX,KAAK,CAACQ,OAAO,EAAE,EAAEI,SAAS,EAAE,IAAI,EAAEH,QAAQ,EAARA,QAAQ,CAAC,CAAC,CAAC;;MAEzD;MACA,IAAIE,GAAG,CAACE,UAAU,CAACC,MAAM,EAAE;QACzB,IAAMC,aAAa,GAAGJ,GAAG,CAACE,UAAU,CAACC,MAAM,CAACN,OAAO;QACnD,IAAMQ,MAAM,GAAG,IAAIZ,eAAe,CAAC,EAAEG,SAAS,EAAE,IAAI,CAACA,SAAS,CAAC,CAAC,CAAC;QACjES,MAAM,CAACC,EAAE,CAAC,SAAS,EAAE,UAACC,OAAO,UAAK,MAAI,CAACC,IAAI,CAAC,SAAS,EAAED,OAAO,CAAC,GAAC;QAChER,IAAI,GAAGA,IAAI,CAACU,MAAM,CAACJ,MAAM,CAACK,OAAO,CAACN,aAAa,CAAC,CAAC;MACnD;;MAEA;MACA,IAAIJ,GAAG,CAACE,UAAU,CAACS,WAAW,EAAE;QAC9B,IAAMC,kBAAkB,GAAGrB,aAAa,CAACS,GAAG,CAACE,UAAU,EAAE,EAAEW,EAAE,EAAEf,QAAQ,CAAC,CAAC,CAAC,CAACD,OAAO;QAClF,IAAMiB,MAAM,GAAG,IAAIrB,eAAe,CAAC,EAAEG,SAAS,EAAE,IAAI,CAACA,SAAS,CAAC,CAAC,CAAC;QACjEkB,MAAM,CAACR,EAAE,CAAC,SAAS,EAAE,UAACC,OAAO,UAAK,MAAI,CAACC,IAAI,CAAC,SAAS,EAAED,OAAO,CAAC,GAAC;QAChER,IAAI,GAAGA,IAAI,CAACU,MAAM,CAACK,MAAM,CAACJ,OAAO,CAACE,kBAAkB,CAAC,CAAC;MACxD;;MAEA;MACA,IAAIZ,GAAG,CAACE,UAAU,CAACa,QAAQ,EAAE;QAC3B,IAAMC,eAAe,GAAGhB,GAAG,CAACE,UAAU,CAACa,QAAQ,CAAClB,OAAO;QACvD,IAAMoB,gBAAgB,GAAG3B,eAAe,CAAC;UACvC4B,MAAM,EAAEF,eAAe;UACvBlB,QAAQ,EAARA,QAAQ;UACRe,EAAE,EAAEf;QACN,CAAC,CAAC,CAACqB,IAAI;QACP,IAAMC,MAAM,GAAG,IAAI3B,eAAe,CAAC,EAAEG,SAAS,EAAE,IAAI,CAACA,SAAS,CAAC,CAAC,CAAC;QACjEwB,MAAM,CAACd,EAAE,CAAC,SAAS,EAAE,UAACC,OAAO,UAAK,MAAI,CAACC,IAAI,CAAC,SAAS,EAAED,OAAO,CAAC,GAAC;QAChER,IAAI,GAAGA,IAAI,CAACU,MAAM,CAACW,MAAM,CAACV,OAAO,CAACO,gBAAgB,CAAC,CAAC;MACtD;;MAEA,OAAOlB,IAAI;IACb,CAAC,uBAxCmCP,SAAS,WAA1BE,QAAQ"}